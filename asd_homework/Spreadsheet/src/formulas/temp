		class OperatorHandler
		{
			ListIterator<Contents> items = elements.listIterator();		// Iterator on the elements
			Contents newItem = null;									// The item from the list we're inspecting--operand or operator
			Contents operand = null;									// The operand we find in the list of elements
			NumericalOperator currentOperator = null;					// The operator we're currently adding onto
			NumericalOperator newOperator = null;						// The new operator we're finding in the list
			Contents root = null;										// The root of the overall tree of elements
			
			public void handleWhenThereIsNoCurrentOperator()						// Handle the situation when there is no operator et
			{
				if (!items.hasNext())						// If it is the end of the list
					root = operand;							// That's it! there's just one number in that list
				else
				{
					newItem = items.next();					// Get next item
					if (newItem.isOperator())				// Should be an operator
					{
						currentOperator = (NumericalOperator) newItem;	// ...the current one
						newOperator = currentOperator;		// As this is the first and only operator, it also is the new one
						currentOperator.append(operand);	// Put the operand in the operator
					}
					// If that wasn't an operator, we'll silently skip that element--not supposed to be here
				}
			}
			
			public void handleWhenThereIsAnOperator()
			{
				newOperator = (NumericalOperator) newItem;			// Make it the new one
				if (newOperator != currentOperator)					// If new operator is different from the current one
				{
					if (currentOperator != null)					// If there already is a current operator...
						newOperator.append(currentOperator);		// ...append it to the new one
					currentOperator = newOperator;					// New operator now becomes the current one
					root = currentOperator;							// and the current operator is the root
				}
			}
			
			
		};
		
			public Element assembleElementsBrokenDown()
	{
		if (elements.size() > 0)
			if (elements.get(0).isText())									// For now, if there is some text, then that's all there is
				formulaObject = elements.get(0);
			else															// Other than text will be numbers, operators, and references
			{
				ListIterator<Contents> items = elements.listIterator();		// Iterator on the elements
				Contents newItem = null;									// The item from the list we're inspecting--operand or operator
				Contents operand = null;									// The operand we find in the list of elements
				NumericalOperator currentOperator = null;					// The operator we're currently adding onto
				NumericalOperator newOperator = null;						// The new operator we're finding in the list
				Contents root = null;										// The root of the overall tree of elements
				
				while (items.hasNext())										// While list has more items
				{
					newItem = items.next();									// get the operand
					if (newItem.isNumericalValue())							// Is that new item a numerical value?
					{
						operand = newItem;									// This new item is our operand
						if (currentOperator != null)						// if we're already having an operator
							currentOperator.append(operand);				// ...append operand to it
						else 												// Either first iteration or single number: we don't even have an operator yet
							{
								if (!items.hasNext())						// If it is the end of the list
									root = operand;							// That's it! there's just one number in that list
								else
								{
									newItem = items.next();					// Get next item
									if (newItem.isOperator())				// Should be an operator
									{
										currentOperator = (NumericalOperator) newItem;	// ...the current one
										newOperator = currentOperator;		// As this is the first and only operator, it also is the new one
										currentOperator.append(operand);	// Put the operand in the operator
									}
									// If that wasn't an operator, we'll silently skip that element--not supposed to be here
								}
							}
						if (currentOperator != null)
							root = currentOperator;							// If there is a current operator, it's the root
					}
					else if (newItem.isOperator())							// If this is an operator		
					{
						newOperator = (NumericalOperator) newItem;			// Make it the new one
						if (newOperator != currentOperator)					// If new operator is different from the current one
						{
							if (currentOperator != null)					// If there already is a current operator...
								newOperator.append(currentOperator);		// ...append it to the new one
							currentOperator = newOperator;					// New operator now becomes the current one
							root = currentOperator;							// and the current operator is the root
						}
					}
					
				} 
				if (root != null)											// If we've put a numerical value or an operator there...
					formulaObject = root;									// ...then it's our final formula object
			}	
		
		return formulaObject;
	}
	
		public Element assembleElements()
	{
		// Sprint 7: decoding and executing formulas like: "34 * 2 + 1 + [1,4] / 3", as well as "Some text"
		// We'll end up with either one text string, one numerical value, or the root of a tree of operators and operands
		
		if (elements.size() > 0)
			if (elements.get(0).isText())									// For now, if there is some text, then that's all there is
				formulaObject = elements.get(0);
			else															// Other than text will be numbers, operators, and references
			{
				ListIterator<Contents> items = elements.listIterator();		// Iterator on the elements
				Contents newItem = null;									// The item from the list we're inspecting--operand or operator
				Contents operand = null;									// The operand we find in the list of elements
				NumericalOperator currentOperator = null;					// The operator we're currently adding onto
				NumericalOperator newOperator = null;						// The new operator we're finding in the list
				Contents root = null;										// The root of the overall tree of elements
				
				// NO: rewrite and start by always reading the first object as an operand, or text, or quit!
				// Then: loop through the rest. Do what you mean, for if you don't, how can you mean what you do?
				
				while (items.hasNext())										// While list has more items
				{
					newItem = items.next();									// get the new item
					if (newItem.isOperand())								// Is that new item an operand?
					{
						operand = newItem;									// This new item is our operand
						if (currentOperator != null)						// if we're already having an operator
							currentOperator.append(operand);				// ...append operand to it
						else 												// must be first iteration: we don't even have an operator yet
							{
								if (!items.hasNext())						// If it is the end of the list
									root = operand;							// That's it! there's just that operand in that list
								else
								{
									newItem = items.next();					// Get next item
									if (newItem.isEmptyOperator())			// Should be an operator
									{
										currentOperator = (NumericalOperator) newItem;	// ...the current one
										newOperator = currentOperator;		// As this is the first and only operator, it also is the new one
										currentOperator.append(operand);	// Put the operand in the operator
									}
									// If that wasn't an operator, we'll silently skip that element--not supposed to be here
								}
							}
						if (currentOperator != null)
							root = currentOperator;							// If there is a current operator, it's the root
					}
					else if (newItem.isEmptyOperator())						// If this is an operator		
					{
						newOperator = (NumericalOperator) newItem;			// Make it the new one
						if (newOperator != currentOperator)					// If new operator is different from the current one
						{
							if (currentOperator != null)					// If there already is a current operator...
								newOperator.append(currentOperator);		// ...append it to the new one
							currentOperator = newOperator;					// New operator now becomes the current one
							root = currentOperator;							// and the current operator is the root
						}
					}
					
				} 
				if (root != null)											// If we've put a numerical value or an operator there...
					formulaObject = root;									// ...then it's our final formula object
			}	
		
		return formulaObject;
	}
	
	